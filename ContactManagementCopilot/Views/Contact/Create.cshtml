

@model ContactDetails

<h2>Create Contact</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
      
         <div class="form-group row">
    @Html.LabelFor(model => model.Firstname, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Firstname, new { htmlAttributes = new { @class = "form-control", minlength = "2", maxlength = "50" } })
        @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger" })
    </div>
</div>
<br>
<div class="form-group row">
    @Html.LabelFor(model => model.Lastname, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Lastname, new { htmlAttributes = new { @class = "form-control", minlength = "1", maxlength = "50" } })
        @Html.ValidationMessageFor(model => model.Lastname, "", new { @class = "text-danger" })
    </div>
</div>
<br>
<div class="form-group row">
    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", type = "email" } })
        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
    </div>
</div>
<br>
<div class="form-group row">
    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control", type = "tel", pattern = "[0-9]{10}", title = "Phone number must be 10 digits" } })
        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
    </div>
</div><br>

         <div class="form-group row"> 
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>
                 <br/>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-success" />
               @Html.ActionLink("Back to List", "Index", "Contact", null, new { @class = "btn btn-primary" })

            </div>
        </div>
    </div>
}


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $(document).ready(function () {
            $('form').on('keyup change', 'input, select, textarea', function () {
                var field = $(this);
                var form = field.closest('form');
                
                $.validator.unobtrusive.parseElement(this);
                
                if ($(this).valid()) {
                    var errorSpan = form.find("[data-valmsg-for='" + field.attr('name') + "']");
                    errorSpan.text('').removeClass('field-validation-error').addClass('field-validation-valid');
                    
                    // Remove the field from the validation summary
                    var summary = form.find('.validation-summary-errors, .validation-summary-valid');
                    summary.find("li:contains('" + field.attr('name') + "')").remove();
                    
                    // If no more errors, hide the summary
                    if (summary.find('li').length === 0) {
                        summary.remove();
                    }
                }
            });
        });
    </script>
}
 
